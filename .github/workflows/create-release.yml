name: Create release

on:
  push:
    branches:
      - main

env:
  APP_NAME: usvctl
  RUN_COMMAND: "from usvctl.main import app; app()"
  DISPLAY_NAME: "USV Control CLI"
  APP_AUTHOR: "Schulz Systemtechnik GmbH"
  ARTIFACT_NAME: built_files
    
jobs:

  project_version:
    runs-on: ubuntu-20.04

    outputs:
      project-version: ${{ steps.setup-poetry.outputs.project-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup poetry
        id: setup-poetry
        uses: henningwoehr/actions/poetry/setup@main

  build_linux:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: build executable
      uses: henningwoehr/actions/pyoxidizer-build@main
      with:
        target-system: linux_gnu_x64
        app-name: ${{ env.APP_NAME }}
        run-command: ${{ env.RUN_COMMAND }}
        artifact-name: ${{ env.ARTIFACT_NAME }}
        display-name: ${{ env.DISPLAY_NAME }}
        app-author: ${{ env.APP_AUTHOR }}
        python-version: "3.10"

  build_windows_x32:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: build executable
      uses: henningwoehr/actions/pyoxidizer-build@main
      with:
        target-system: windows_x32
        app-name: ${{ env.APP_NAME }}
        run-command: ${{ env.RUN_COMMAND }}
        artifact-name: ${{ env.ARTIFACT_NAME }}
        display-name: ${{ env.DISPLAY_NAME }}
        app-author: ${{ env.APP_AUTHOR }}
        python-version: "3.10"

  build_windows_x64:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: build executable
      uses: henningwoehr/actions/pyoxidizer-build@main
      with:
        target-system: windows_x64
        app-name: ${{ env.APP_NAME }}
        run-command: ${{ env.RUN_COMMAND }}
        artifact-name: ${{ env.ARTIFACT_NAME }}
        display-name: ${{ env.DISPLAY_NAME }}
        app-author: ${{ env.APP_AUTHOR }}
        python-version: "3.10"

  create_release:
    runs-on: ubuntu-latest
    needs: [project_version, build_linux, build_windows_x32, build_windows_x64]

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: built_files

      - name: Create Github Release
        uses: ncipollo/release-action@v1.10.0
        with:
          artifacts: "built_files/*"
          body: "This is a prerelease for testing only!"
          tag: "${{ needs.project_version.outputs.project-version }}" 